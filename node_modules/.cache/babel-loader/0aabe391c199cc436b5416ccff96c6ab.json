{"ast":null,"code":"/**\n * fetch超时处理 由于原生的Fetch API 并不支持timeout属性，如果项目中需要控制fetch请求的超时时间，可以对fetch请求进一步封装实现timeout功能\n * 让fetch也可以timeout\n *  timeout不是请求连接超时的含义，它表示请求的response时间，包括请求的连接、服务器处理及服务器响应回来的时间\n * fetch的timeout即使超时发生了，本次请求也不会被abort丢弃掉，它在后台仍然会发送到服务器端，只是本次请求的响应内容被丢弃而已\n * @param {Promise} fetch_promise    fetch请求返回的Promise\n * @param {number} [timeout=60000]   单位：毫秒，这里设置默认超时时间为1fenzhong\n * @return 返回Promise\n */\nfunction timeout_fetch(fetch_promise) {\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60000;\n  var timeout_fn = null; //这是一个可以被reject的promise\n\n  var timeout_promise = new Promise(function (resolve, reject) {\n    timeout_fn = function timeout_fn() {\n      reject('连接超时');\n    };\n  }); //这里使用Promise.race，以最快 resolve 或 reject 的结果来传入后续绑定的回调\n\n  var abortable_promise = Promise.race([fetch_promise, timeout_promise]);\n  setTimeout(function () {\n    timeout_fn();\n  }, timeout);\n  return abortable_promise;\n}\n/**\n * @param {string} url 接口地址\n * @param {string} method 请求方法：GET、POST，只能大写\n * @param {JSON} [params=''] body的请求参数，默认为空\n * @param {object} setting 扩展参数\n * @return 返回Promise\n */\n\n\nfunction fetchRequest(path) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var setting = arguments.length > 2 ? arguments[2] : undefined;\n  var url = path;\n  var options = Object.assign({\n    credentials: 'include',\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      \"Content-Type\": \"application/json;charset=UTF-8\"\n    }\n  }, setting);\n  var paramsArray = [];\n\n  if (params) {\n    //如果网络请求中带有参数\n    Object.keys(params).forEach(function (key) {\n      return paramsArray.push(key + '=' + (typeof params[key] == 'string' ? params[key] : JSON.stringify(params[key])));\n    });\n  }\n\n  if (options.method.toUpperCase() === 'GET') {\n    if (params) {\n      //如果网络请求中带有参数\n      url += (url.search(/\\?/) === -1 ? '?' : '&') + paramsArray.join('&');\n    }\n\n    console.log(options.method.toUpperCase(), 'request url:', url); //打印请求参数\n  } else {\n    if (!options.body) {\n      if (options.formData) {\n        options.body = paramsArray.join('&');\n      } else {\n        options.body = JSON.stringify(params);\n      }\n    }\n\n    console.log(options.method.toUpperCase(), 'request url:', url, options.body); //打印请求参数\n  }\n\n  return new Promise(function (resolve, reject) {\n    var sendTime = new Date();\n\n    if (url.indexOf('http') === -1) {\n      console.log('服务主机未获取到!' + url);\n      return;\n    }\n\n    timeout_fetch(fetch(url, options)).then(function (response) {\n      console.log('request 耗时' + (new Date().getTime() - sendTime.getTime()) / 1000 + '秒！');\n\n      if (response.status === 200) {\n        return response.json();\n      } else {\n        var text = '',\n            textStatus = response.statusText,\n            status = response.status;\n\n        if (textStatus === 'timeout') {\n          text = '服务器连接超时,请稍后重试！';\n        } else if (textStatus === 'error') {\n          text = '服务器连接错误，请联系管理员！[' + response.state + ']';\n        } else if (textStatus === 'parsererror') {\n          text = '服务器解析错误，请联系管理员！';\n        } else if (textStatus === 'abort') {\n          console.log('服务器,中止请求');\n        } else if (status === '404') {\n          text = '服务器无法回应且不知原因(' + status + ')';\n        } else {\n          try {\n            return response.json();\n          } catch (err) {\n            text = '请求服务器异常[' + response.status + (textStatus ? '---' + textStatus : '') + ']';\n          }\n        }\n\n        throw text;\n      }\n    }).then(function (responseData) {\n      console.log('request success:', url, responseData); //网络请求成功返回的数据\n\n      if (responseData) {\n        if (responseData.error) {\n          throw responseData.error_description;\n        } else if (responseData[0] && responseData[0].Code === '999') {\n          throw responseData[0].ShortText;\n        } else {\n          if (responseData.Message) {\n            throw responseData.Message;\n          } else {\n            resolve(responseData);\n          }\n        }\n      } else {\n        resolve(responseData);\n      }\n    }).catch(function (err) {\n      console.log('request err:', url, err); //网络请求失败返回的数据\n\n      reject(err);\n    });\n  });\n}\n\nexport default fetchRequest;","map":{"version":3,"sources":["/Users/wenxiaofang/OA/src/Base/base.js"],"names":["timeout_fetch","fetch_promise","timeout","timeout_fn","timeout_promise","Promise","resolve","reject","abortable_promise","race","setTimeout","fetchRequest","path","params","setting","url","options","Object","assign","credentials","method","headers","paramsArray","keys","forEach","key","push","JSON","stringify","toUpperCase","search","join","console","log","body","formData","sendTime","Date","indexOf","fetch","then","response","getTime","status","json","text","textStatus","statusText","state","err","responseData","error","error_description","Code","ShortText","Message","catch"],"mappings":"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","sourcesContent":["\n/**\n * fetch超时处理 由于原生的Fetch API 并不支持timeout属性，如果项目中需要控制fetch请求的超时时间，可以对fetch请求进一步封装实现timeout功能\n * 让fetch也可以timeout\n *  timeout不是请求连接超时的含义，它表示请求的response时间，包括请求的连接、服务器处理及服务器响应回来的时间\n * fetch的timeout即使超时发生了，本次请求也不会被abort丢弃掉，它在后台仍然会发送到服务器端，只是本次请求的响应内容被丢弃而已\n * @param {Promise} fetch_promise    fetch请求返回的Promise\n * @param {number} [timeout=60000]   单位：毫秒，这里设置默认超时时间为1fenzhong\n * @return 返回Promise\n */\nfunction timeout_fetch(fetch_promise, timeout = 60000) {\n    let timeout_fn = null;\n\n    //这是一个可以被reject的promise\n    let timeout_promise = new Promise(function (resolve, reject) {\n        timeout_fn = function () {\n            reject('连接超时');\n        };\n    });\n\n    //这里使用Promise.race，以最快 resolve 或 reject 的结果来传入后续绑定的回调\n    let abortable_promise = Promise.race([\n        fetch_promise,\n        timeout_promise\n    ]);\n\n    setTimeout(function () {\n        timeout_fn();\n    }, timeout);\n\n    return abortable_promise;\n}\n\n/**\n * @param {string} url 接口地址\n * @param {string} method 请求方法：GET、POST，只能大写\n * @param {JSON} [params=''] body的请求参数，默认为空\n * @param {object} setting 扩展参数\n * @return 返回Promise\n */\nfunction fetchRequest(path, params = '', setting) {\n    let url = path;\n\n    let options = Object.assign({\n        credentials: 'include',\n        method: 'POST',\n        headers: {\n            'Accept': 'application/json',\n            \"Content-Type\": \"application/json;charset=UTF-8\"\n        }\n    }, setting);\n\n    let paramsArray = [];\n    if (params) {//如果网络请求中带有参数\n        Object.keys(params).forEach(key => paramsArray.push(key + '=' + (typeof params[key] == 'string' ? params[key] : JSON.stringify(params[key]))));\n    }\n\n    if (options.method.toUpperCase() === 'GET') {\n        if (params) {//如果网络请求中带有参数\n            url += (url.search(/\\?/) === -1 ? '?' : '&') + paramsArray.join('&');\n        }\n        console.log(options.method.toUpperCase(), 'request url:', url);  //打印请求参数\n    }\n    else {\n        if (!options.body) {\n            if (options.formData) {\n                options.body = paramsArray.join('&');\n            }\n            else {\n                options.body = JSON.stringify(params);\n            }\n        }\n        console.log(options.method.toUpperCase(), 'request url:', url, options.body);  //打印请求参数\n    }\n\n\n    return new Promise(function (resolve, reject) {\n        let sendTime = new Date();\n\n        if (url.indexOf('http') === -1) {\n            console.log('服务主机未获取到!' + url);\n            return;\n        }\n        timeout_fetch(fetch(url, options))\n            .then((response) => {\n                console.log('request 耗时' + ((new Date()).getTime() - sendTime.getTime()) / 1000 + '秒！');\n                if (response.status === 200) {\n                    return response.json();\n                }\n                else {\n                    let text = '', textStatus = response.statusText, status = response.status;\n                    if (textStatus === 'timeout') {\n                        text = '服务器连接超时,请稍后重试！';\n                    } else if (textStatus === 'error') {\n                        text = '服务器连接错误，请联系管理员！[' + response.state + ']';\n                    } else if (textStatus === 'parsererror') {\n                        text = '服务器解析错误，请联系管理员！';\n                    } else if (textStatus === 'abort') {\n                        console.log('服务器,中止请求');\n                    } else if (status === '404') {\n                        text = '服务器无法回应且不知原因('+status+')';\n                    } else {\n                        try {\n                            return response.json();\n                        }\n                        catch (err) {\n                            text = '请求服务器异常[' + response.status + (textStatus ? '---' + textStatus : '') + ']';\n                        }\n                    }\n                    throw text;\n                }\n            })\n            .then((responseData) => {\n                console.log('request success:', url, responseData);   //网络请求成功返回的数据\n\n                 if(responseData){\n                        if (responseData.error) {\n                            throw responseData.error_description;\n                        }\n                        else if (responseData[0] && responseData[0].Code === '999') {\n                            throw responseData[0].ShortText;\n                        }\n                        else {\n                            if (responseData.Message) {\n                                throw responseData.Message;\n                            }\n                            else {\n                                resolve(responseData);\n                            }\n                        }\n                 }\n                 else{\n                    resolve(responseData);\n                 }\n           \n            })\n            .catch((err) => {\n                console.log('request err:', url, err);   //网络请求失败返回的数据\n                reject(err);\n            })\n\n    });\n}\n\n\n\nexport default fetchRequest;"]},"metadata":{},"sourceType":"module"}