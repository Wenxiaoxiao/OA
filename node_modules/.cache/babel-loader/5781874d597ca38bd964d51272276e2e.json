{"ast":null,"code":"(function (self) {\n  var root = self;\n  /**\n   * 匹配描述块，一个用来表示相同内容块在新旧文档内位置的描述对象\n   * @param {Number} startInOld [相同部分在旧文档中的起始位置]\n   * @param {Number} startInNew [相同部分在新文档中的起始位置]\n   * @param {Number} size       [相同部分的连续词元个数]\n   */\n\n  var Match = function Match(startInOld, startInNew, size) {\n    this.size = size;\n    this.startInOld = startInOld;\n    this.startInNew = startInNew;\n    this.endInOld = this.startInOld + this.size;\n    this.endInNew = this.startInNew + this.size;\n  };\n  /**\n   * 操作单元，一个操作单元描述了在具体位置所要\n   * 执行的具体操作(如：insert、delete、equal与replace)\n   * @param {Function} action\n   * @param {Number}   startInOld [相同部分在旧文档中的起始位置]\n   * @param {Number}   endInOld   [相同部分在旧文档中的结束位置]\n   * @param {Number}   startInNew [相同部分在新文档中的起始位置]\n   * @param {Number}   endInNew   [相同部分在新文档中的结束位置]\n   */\n\n\n  var Operation = function Operation(action, startInOld, endInOld, startInNew, endInNew) {\n    this.action = action;\n    this.endInOld = endInOld;\n    this.endInNew = endInNew;\n    this.startInOld = startInOld;\n    this.startInNew = startInNew;\n  };\n  /**\n   * 将HTML解析成单词列表\n   * 例：<a> Hello World </a>  ---> [\"<a>\",\" \", \"Hello\", \" \", \"World\", \" \", \"</a>\"]\n   * @param  {String}         html\n   * @return {Array<String>}\n   */\n\n\n  var convertHtml2Words = function convertHtml2Words(html) {\n    return html.match(/<[^>]+>|[^<|>|\\w]|[\\d|a-z|A-Z]|\\w+\\b|\\s+/mg);\n  };\n  /**\n   * 差异对比构建类\n   * @param {String} oldVersion 老文档\n   * @param {String} newVersion 新文档\n   */\n\n\n  var DiffBuilder = function DiffBuilder(oldVersion, newVersion) {\n    this.oldVersion = oldVersion;\n    this.newVersion = newVersion;\n    this.operation = null;\n    this.wordIndices = {};\n    this.oldWords = [];\n    this.newWords = [];\n    this.content = [];\n  };\n\n  DiffBuilder.prototype = {\n    build: function build() {\n      var sd = new Date();\n      this.splitInputs2Words();\n      this.indexNewWords();\n      this.operations = this.getOperations();\n      this.performOperation(); //return \"<br/>[耗时：\" + (new Date - sd) + \"毫秒]\" + this.content.join('');\n\n      return this.content.join('');\n    },\n    performOperation: function performOperation() {\n      var opt;\n\n      for (var i = 0, len = this.operations.length; i < len; i++) {\n        opt = this.operations[i];\n        this.operation = opt;\n        opt.action.call(this, opt);\n      }\n    },\n\n    /**\n     * 将传入的文本切割成词元\n     */\n    splitInputs2Words: function splitInputs2Words() {\n      this.oldWords = convertHtml2Words(this.oldVersion);\n      this.newWords = convertHtml2Words(this.newVersion);\n    },\n\n    /**\n     * 构建一个newWords队列对应的索引表\n     * 例如：\n     * this.newWords = [\"<a>\", \" \", \"Hello\", \" \", \"World\", \" \", \"</a>\"];\n     *\n     * 构建成--->\n     *\n     * this.wordIndices = {\n     *     \"<a>\"   : [0],\n     *     \" \"     : [1, 3, 5]\n     *     \"Hello\" : [2],\n     *     \"World\" : [4],\n     *     \"</a>\"  : [6]\n     * };\n     */\n    indexNewWords: function indexNewWords() {\n      var newWords = this.newWords;\n      var wordIndices = this.wordIndices;\n      var key,\n          len = newWords.length;\n      var toString = Object.prototype.toString;\n\n      for (var i = 0; i < len; i++) {\n        key = newWords[i];\n\n        if (toString.call(wordIndices[key]) !== '[object Array]') {\n          wordIndices[key] = [];\n        }\n\n        wordIndices[key].push(i);\n      }\n\n      console.log(this.wordIndices);\n    },\n\n    /**\n     * 将文档抽象为操作描述队列\n     * 例如:[euqal, insert, equal]，一篇文档可以被抽象为由多个\n     * “操作命令与位置信息”组成的操作队列；\n     * @return {Array<Operation>}\n     */\n    getOperations: function getOperations() {\n      var optInOld = 0;\n      var optInNew = 0;\n      var operations = [];\n      var match, action;\n      var matchStartsInOld;\n      var matchStartsInNew;\n      var matchs = this.matchingBlocks(); // matchs = [\n      //     { size: 4, startInOld: 0, startInNew: 0, endInOld: 4, endInNew: 4 },\n      //     { size: 30, startInOld: 4, startInNew: 4, endInOld: 34, endInNew: 34 },\n      //     { size: 0, startInOld: 34, startInNew: 34, endInOld: 34, endInNew: 34 },\n      // ]\n\n      matchs.push(new Match(this.oldWords.length, this.newWords.length, 0));\n\n      for (var i = 0, len = matchs.length; i < len; i++) {\n        action = null;\n        match = matchs[i];\n        matchStartsInOld = optInOld === match.startInOld;\n        matchStartsInNew = optInNew === match.startInNew;\n\n        if (!matchStartsInOld && !matchStartsInNew) {\n          action = this.replace;\n        } else if (matchStartsInOld && !matchStartsInNew) {\n          action = this.insert;\n        } else if (!matchStartsInOld && matchStartsInNew) {\n          action = this.del;\n        }\n\n        if (action) {\n          operations.push(new Operation(action, optInOld, match.startInOld, optInNew, match.startInNew));\n        } // \n\n\n        if (match.size) {\n          operations.push(new Operation(this.equal, match.startInOld, match.endInOld, match.startInNew, match.endInNew));\n        }\n\n        optInOld = match.endInOld;\n        optInNew = match.endInNew;\n      }\n\n      return operations;\n    },\n\n    /**\n     * 获取一个用于描述新旧文档内全部相同内容的匹配描述列表\n     * @return {Array<Match>} 文档匹配描述列表\n     */\n    matchingBlocks: function matchingBlocks() {\n      var matchingBlocks = [];\n      this.findMatchingBlocks(0, this.oldWords.length, 0, this.newWords.length, matchingBlocks);\n      return matchingBlocks;\n    },\n\n    /**\n     * 递归查找匹配项\n     * @param  {Number} startInOld\n     * @param  {Number} endInOld\n     * @param  {Number} startInNew\n     * @param  {Number} endInNew\n     * @param  {Array<Match>} matchingBlocks\n     */\n    findMatchingBlocks: function findMatchingBlocks(startInOld, endInOld, startInNew, endInNew, matchingBlocks) {\n      var match = this.findMatch(startInOld, endInOld, startInNew, endInNew);\n\n      if (!match) {\n        return;\n      }\n\n      if (startInOld < match.startInOld && startInNew < match.startInNew) {\n        this.findMatchingBlocks(startInOld, match.startInOld, startInNew, match.startInNew, matchingBlocks);\n      }\n\n      matchingBlocks.push(match);\n\n      if (match.endInOld < endInOld && match.endInNew < endInNew) {\n        this.findMatchingBlocks(match.endInOld, endInOld, match.endInNew, endInNew, matchingBlocks);\n      }\n    },\n\n    /**\n     * 从指定位置开始查询第一块匹配的文本块\n     * @param  {Number} startInOld\n     * @param  {Number} endInOld\n     * @param  {Number} startInNew\n     * @param  {Number} endInNew\n     */\n    findMatch: function findMatch(startInOld, endInOld, startInNew, endInNew) {\n      var bestMatchInOld = startInOld;\n      var bestMatchInNew = startInNew;\n      var bestMatchSize = 0;\n      var matchLengthAt = {};\n      var newMatchLengthAt;\n      var newMatchLength, wordIndexList, matchIndex, len; // 遍历旧的文本的内容[\"<p>\", \"不\", \"是\", \"吧\", \"</p>\", \"<div class='media-wrap image-wrap'>\", \"<img id='' title='' alt='' loop='' autoplay='' con…iuniu/69e3945f-4927-4cb8-aecc-0a8ab364de28.png'/>\", \"</div>\", \"<p>\", \"</p>\"]\n\n      for (var idxOld = startInOld; idxOld < endInOld; idxOld++) {\n        newMatchLengthAt = {}; // wordIndexList 的值为[0] wordIndices值为{<p>: [0], </p>: [1]}\n\n        wordIndexList = this.wordIndices[this.oldWords[idxOld]];\n        len = wordIndexList ? wordIndexList.length : 0;\n\n        for (var i = 0; i < len; i++) {\n          // matchIndex 为 0\n          matchIndex = wordIndexList[i];\n\n          if (matchIndex < startInNew) {\n            continue;\n          }\n\n          if (matchIndex >= endInNew) {\n            break;\n          }\n\n          newMatchLength = (matchLengthAt[matchIndex - 1] || 0) + 1;\n          newMatchLengthAt[matchIndex] = newMatchLength;\n\n          if (newMatchLength > bestMatchSize) {\n            // [相同部分在旧文档中的起始位置]\n            bestMatchInOld = idxOld - newMatchLength + 1; // [相同部分在新文档中的起始位置]\n\n            bestMatchInNew = matchIndex - newMatchLength + 1; // [相同部分的连续词元个数]\n\n            bestMatchSize = newMatchLength;\n          }\n        }\n\n        matchLengthAt = newMatchLengthAt;\n      }\n\n      console.log('bestMatchSize:' + bestMatchSize);\n      console.log('bestMatchInOld:' + bestMatchInOld);\n      console.log('bestMatchInNew:' + bestMatchInNew);\n      return bestMatchSize ? new Match(bestMatchInOld, bestMatchInNew, bestMatchSize) : null;\n    },\n    insert: function insert(opt, tagCls) {\n      this.insertTag('ins', tagCls || 'diffins', this.newWords.slice(opt.startInNew, opt.endInNew));\n    },\n    del: function del(opt, tagCls) {\n      this.insertTag('del', tagCls || 'diffdel', this.oldWords.slice(opt.startInOld, opt.endInOld));\n    },\n    equal: function equal(opt) {\n      this.content = this.content.concat(this.newWords.slice(opt.startInNew, opt.endInNew));\n    },\n    replace: function replace(opt) {\n      this.del(opt, 'diffmod');\n      this.insert(opt, 'diffmod');\n    },\n\n    /**\n     * 添加标签\n     * @param  {String} tagName\n     * @param  {String} cssCls\n     * @param  {String} words\n     */\n    insertTag: function insertTag(tagName, cssCls, words) {\n      var nonTags;\n      var that = this;\n\n      while (words.length) {\n        //获取words内“连续”的非标签字符\n        nonTags = this.extractConsecutiveWords(words, true);\n\n        if (nonTags.length) {\n          this.content.push(this.warpText(nonTags.join(''), tagName, cssCls));\n        }\n\n        if (words.length) {\n          //获取words内“连续”的标签字符\n          this.content = this.content.concat(this.extractConsecutiveWords(words, false));\n        }\n      }\n    },\n\n    /**\n     * 获取words内连续的“文本”或“标签”\n     * @param  {Array<String>} words\n     * @param  {Boolean} isTag\n     * @return {Array<String>}\n     */\n    extractConsecutiveWords: function extractConsecutiveWords(words, isTag) {\n      var idxOfFirstTag = null;\n\n      for (var i = 0, len = words.length; i < len; i++) {\n        //注：是取判定条件的前一位\n        if (this.isTag(words[i]) == isTag) {\n          idxOfFirstTag = i;\n          break;\n        }\n      }\n\n      return words.splice(0, idxOfFirstTag !== null ? idxOfFirstTag : words.length);\n    },\n    warpText: function warpText(text, tagName, cssCls) {\n      return '<' + tagName + ' class=\"' + cssCls + '\">' + text + '</' + tagName + '>';\n    },\n    isOpeningTag: function isOpeningTag(item) {\n      return /^\\s*<[^>]+>\\s*$/ig.test(item);\n    },\n    isClosingTag: function isClosingTag(item) {\n      return /^\\s*<\\/[^>]+>\\s*$/ig.test(item);\n    },\n    isOnlyTag: function isOnlyTag(item) {\n      return /^\\s*<[^>]+\\/>\\s*$/ig.test(item);\n    },\n    isTag: function isTag(item) {\n      return this.isOpeningTag(item) ? 1 : this.isClosingTag(item) ? 2 : 0;\n    }\n  };\n\n  root.getHTMLDiff = function (oldVersion, newVersion) {\n    if (oldVersion == newVersion) {\n      return newVersion;\n    } else {\n      return new DiffBuilder(oldVersion, newVersion).build();\n    }\n  }; //export default root.getHTMLDiff\n\n})(window);","map":{"version":3,"sources":["/Users/wenxiaofang/OA/src/Components/Htmldiff/htmldiff.js"],"names":["self","root","Match","startInOld","startInNew","size","endInOld","endInNew","Operation","action","convertHtml2Words","html","match","DiffBuilder","oldVersion","newVersion","operation","wordIndices","oldWords","newWords","content","prototype","build","sd","Date","splitInputs2Words","indexNewWords","operations","getOperations","performOperation","join","opt","i","len","length","call","key","toString","Object","push","console","log","optInOld","optInNew","matchStartsInOld","matchStartsInNew","matchs","matchingBlocks","replace","insert","del","equal","findMatchingBlocks","findMatch","bestMatchInOld","bestMatchInNew","bestMatchSize","matchLengthAt","newMatchLengthAt","newMatchLength","wordIndexList","matchIndex","idxOld","tagCls","insertTag","slice","concat","tagName","cssCls","words","nonTags","that","extractConsecutiveWords","warpText","isTag","idxOfFirstTag","splice","text","isOpeningTag","item","test","isClosingTag","isOnlyTag","getHTMLDiff","window"],"mappings":"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","sourcesContent":["(function (self) {\n    var root = self;\n    /**\n     * 匹配描述块，一个用来表示相同内容块在新旧文档内位置的描述对象\n     * @param {Number} startInOld [相同部分在旧文档中的起始位置]\n     * @param {Number} startInNew [相同部分在新文档中的起始位置]\n     * @param {Number} size       [相同部分的连续词元个数]\n     */\n    var Match = function (startInOld, startInNew, size) {\n        this.size = size;\n        this.startInOld = startInOld;\n        this.startInNew = startInNew;\n        this.endInOld = this.startInOld + this.size;\n        this.endInNew = this.startInNew + this.size;\n    };\n\n    /**\n     * 操作单元，一个操作单元描述了在具体位置所要\n     * 执行的具体操作(如：insert、delete、equal与replace)\n     * @param {Function} action\n     * @param {Number}   startInOld [相同部分在旧文档中的起始位置]\n     * @param {Number}   endInOld   [相同部分在旧文档中的结束位置]\n     * @param {Number}   startInNew [相同部分在新文档中的起始位置]\n     * @param {Number}   endInNew   [相同部分在新文档中的结束位置]\n     */\n    var Operation = function (action, startInOld, endInOld, startInNew, endInNew) {\n        this.action = action;\n        this.endInOld = endInOld;\n        this.endInNew = endInNew;\n        this.startInOld = startInOld;\n        this.startInNew = startInNew;\n    };\n\n    /**\n     * 将HTML解析成单词列表\n     * 例：<a> Hello World </a>  ---> [\"<a>\",\" \", \"Hello\", \" \", \"World\", \" \", \"</a>\"]\n     * @param  {String}         html\n     * @return {Array<String>}\n     */\n    var convertHtml2Words = function (html) {\n        return html.match(/<[^>]+>|[^<|>|\\w]|[\\d|a-z|A-Z]|\\w+\\b|\\s+/mg);\n    };\n\n    /**\n     * 差异对比构建类\n     * @param {String} oldVersion 老文档\n     * @param {String} newVersion 新文档\n     */\n    var DiffBuilder = function (oldVersion, newVersion) {\n        this.oldVersion = oldVersion;\n        this.newVersion = newVersion;\n        this.operation = null;\n        this.wordIndices = {};\n        this.oldWords = [];\n        this.newWords = [];\n        this.content = [];\n    };\n\n    DiffBuilder.prototype = {\n\n        build: function () {\n            var sd = new Date();\n            this.splitInputs2Words();\n            this.indexNewWords();\n            this.operations = this.getOperations();\n            this.performOperation();\n            //return \"<br/>[耗时：\" + (new Date - sd) + \"毫秒]\" + this.content.join('');\n            return this.content.join('')\n        },\n\n        performOperation: function () {\n            var opt;\n            for (var i = 0, len = this.operations.length; i < len; i++) {\n                opt = this.operations[i];\n                this.operation = opt;\n                opt.action.call(this, opt);\n            }\n        },\n\n        /**\n         * 将传入的文本切割成词元\n         */\n        splitInputs2Words: function () {\n            this.oldWords = convertHtml2Words(this.oldVersion);\n            this.newWords = convertHtml2Words(this.newVersion);\n        },\n\n        /**\n         * 构建一个newWords队列对应的索引表\n         * 例如：\n         * this.newWords = [\"<a>\", \" \", \"Hello\", \" \", \"World\", \" \", \"</a>\"];\n         *\n         * 构建成--->\n         *\n         * this.wordIndices = {\n         *     \"<a>\"   : [0],\n         *     \" \"     : [1, 3, 5]\n         *     \"Hello\" : [2],\n         *     \"World\" : [4],\n         *     \"</a>\"  : [6]\n         * };\n         */\n        indexNewWords: function () {\n            var newWords = this.newWords;\n            var wordIndices = this.wordIndices;\n            var key, len = newWords.length;\n            var toString = Object.prototype.toString;\n            for (var i = 0; i < len; i++) {\n                key = newWords[i];\n                if (toString.call(wordIndices[key]) !== '[object Array]') {\n                    wordIndices[key] = [];\n                }\n                wordIndices[key].push(i);\n            }\n            console.log(this.wordIndices)\n        },\n        /**\n         * 将文档抽象为操作描述队列\n         * 例如:[euqal, insert, equal]，一篇文档可以被抽象为由多个\n         * “操作命令与位置信息”组成的操作队列；\n         * @return {Array<Operation>}\n         */\n        getOperations: function () {\n            var optInOld = 0;\n            var optInNew = 0;\n            var operations = [];\n            var match, action;\n            var matchStartsInOld;\n            var matchStartsInNew;\n            var matchs = this.matchingBlocks();\n            // matchs = [\n            //     { size: 4, startInOld: 0, startInNew: 0, endInOld: 4, endInNew: 4 },\n            //     { size: 30, startInOld: 4, startInNew: 4, endInOld: 34, endInNew: 34 },\n            //     { size: 0, startInOld: 34, startInNew: 34, endInOld: 34, endInNew: 34 },\n            // ]\n            matchs.push(new Match(this.oldWords.length, this.newWords.length, 0));\n            for (var i = 0, len = matchs.length; i < len; i++) {\n                action = null;\n                match = matchs[i];\n                matchStartsInOld = (optInOld === match.startInOld);\n                matchStartsInNew = (optInNew === match.startInNew);\n                if (!matchStartsInOld && !matchStartsInNew) {\n                    action = this.replace;\n                } else if (matchStartsInOld && !matchStartsInNew) {\n                    action = this.insert;\n                } else if (!matchStartsInOld && matchStartsInNew) {\n                    action = this.del;\n                }\n                if (action) {\n                    operations.push(new Operation(action, optInOld, match.startInOld, optInNew, match.startInNew));\n                }\n                // \n                if (match.size) {\n                    operations.push(new Operation(this.equal, match.startInOld, match.endInOld, match.startInNew, match.endInNew));\n                }\n                optInOld = match.endInOld;\n                optInNew = match.endInNew;\n            }\n            return operations;\n        },\n\n        /**\n         * 获取一个用于描述新旧文档内全部相同内容的匹配描述列表\n         * @return {Array<Match>} 文档匹配描述列表\n         */\n        matchingBlocks: function () {\n            var matchingBlocks = [];\n            this.findMatchingBlocks(0, this.oldWords.length, 0, this.newWords.length, matchingBlocks);\n            return matchingBlocks;\n        },\n\n        /**\n         * 递归查找匹配项\n         * @param  {Number} startInOld\n         * @param  {Number} endInOld\n         * @param  {Number} startInNew\n         * @param  {Number} endInNew\n         * @param  {Array<Match>} matchingBlocks\n         */\n        findMatchingBlocks: function (startInOld, endInOld, startInNew, endInNew, matchingBlocks) {\n            var match = this.findMatch(startInOld, endInOld, startInNew, endInNew);\n            if (!match) {\n                return;\n            }\n            if (startInOld < match.startInOld && startInNew < match.startInNew) {\n                this.findMatchingBlocks(startInOld, match.startInOld, startInNew, match.startInNew, matchingBlocks);\n            }\n            matchingBlocks.push(match);\n            if (match.endInOld < endInOld && match.endInNew < endInNew) {\n                this.findMatchingBlocks(match.endInOld, endInOld, match.endInNew, endInNew, matchingBlocks);\n            }\n        },\n\n        /**\n         * 从指定位置开始查询第一块匹配的文本块\n         * @param  {Number} startInOld\n         * @param  {Number} endInOld\n         * @param  {Number} startInNew\n         * @param  {Number} endInNew\n         */\n        findMatch: function (startInOld, endInOld, startInNew, endInNew) {\n            var bestMatchInOld = startInOld;\n            var bestMatchInNew = startInNew;\n            var bestMatchSize = 0;\n            var matchLengthAt = {};\n            var newMatchLengthAt;\n            var newMatchLength, wordIndexList, matchIndex, len;\n            // 遍历旧的文本的内容[\"<p>\", \"不\", \"是\", \"吧\", \"</p>\", \"<div class='media-wrap image-wrap'>\", \"<img id='' title='' alt='' loop='' autoplay='' con…iuniu/69e3945f-4927-4cb8-aecc-0a8ab364de28.png'/>\", \"</div>\", \"<p>\", \"</p>\"]\n            for (var idxOld = startInOld; idxOld < endInOld; idxOld++) {\n                newMatchLengthAt = {};\n                // wordIndexList 的值为[0] wordIndices值为{<p>: [0], </p>: [1]}\n                wordIndexList = this.wordIndices[this.oldWords[idxOld]];\n                len = wordIndexList ? wordIndexList.length : 0;\n                for (var i = 0; i < len; i++) {\n                    // matchIndex 为 0\n                    matchIndex = wordIndexList[i];\n                    if (matchIndex < startInNew) {\n                        continue;\n                    }\n\n                    if (matchIndex >= endInNew) {\n                        break;\n                    }\n                    newMatchLength = (matchLengthAt[matchIndex - 1] || 0) + 1;\n                    newMatchLengthAt[matchIndex] = newMatchLength;\n                    if (newMatchLength > bestMatchSize) {\n                        // [相同部分在旧文档中的起始位置]\n                        bestMatchInOld = idxOld - newMatchLength + 1;\n                        // [相同部分在新文档中的起始位置]\n                        bestMatchInNew = matchIndex - newMatchLength + 1;\n                        // [相同部分的连续词元个数]\n                        bestMatchSize = newMatchLength;\n                    }\n                }\n                matchLengthAt = newMatchLengthAt;\n            }\n            console.log('bestMatchSize:' + bestMatchSize)\n            console.log('bestMatchInOld:' + bestMatchInOld)\n            console.log('bestMatchInNew:' + bestMatchInNew)\n            return bestMatchSize ? new Match(bestMatchInOld, bestMatchInNew, bestMatchSize) : null;\n        },\n\n        insert: function (opt, tagCls) {\n            this.insertTag('ins', tagCls || 'diffins', this.newWords.slice(opt.startInNew, opt.endInNew));\n        },\n\n        del: function (opt, tagCls) {\n            this.insertTag('del', tagCls || 'diffdel', this.oldWords.slice(opt.startInOld, opt.endInOld));\n        },\n\n        equal: function (opt) {\n            this.content = this.content.concat(this.newWords.slice(opt.startInNew, opt.endInNew));\n        },\n\n        replace: function (opt) {\n            this.del(opt, 'diffmod');\n            this.insert(opt, 'diffmod');\n        },\n        /**\n         * 添加标签\n         * @param  {String} tagName\n         * @param  {String} cssCls\n         * @param  {String} words\n         */\n        insertTag: function (tagName, cssCls, words) {\n            var nonTags;\n            var that = this;\n            while (words.length) {\n                //获取words内“连续”的非标签字符\n                nonTags = this.extractConsecutiveWords(words, true);\n                if (nonTags.length) {\n                    this.content.push(\n                        this.warpText(nonTags.join(''), tagName, cssCls));\n                }\n                if (words.length) {\n                    //获取words内“连续”的标签字符\n                    this.content = this.content.concat(\n                        this.extractConsecutiveWords(words, false));\n                }\n            }\n        },\n\n        /**\n         * 获取words内连续的“文本”或“标签”\n         * @param  {Array<String>} words\n         * @param  {Boolean} isTag\n         * @return {Array<String>}\n         */\n        extractConsecutiveWords: function (words, isTag) {\n            var idxOfFirstTag = null;\n            for (var i = 0, len = words.length; i < len; i++) {\n                //注：是取判定条件的前一位\n                if (this.isTag(words[i]) == isTag) {\n                    idxOfFirstTag = i;\n                    break;\n                }\n\n            }\n            return words.splice(0, idxOfFirstTag !== null ? idxOfFirstTag : words.length);\n        },\n\n        warpText: function (text, tagName, cssCls) {\n            return '<' + tagName + ' class=\"' + cssCls + '\">' + text + '</' + tagName + '>';\n        },\n\n        isOpeningTag: function (item) {\n            return /^\\s*<[^>]+>\\s*$/ig.test(item);\n        },\n\n        isClosingTag: function (item) {\n            return /^\\s*<\\/[^>]+>\\s*$/ig.test(item);\n        },\n        isOnlyTag: function (item) {\n            return /^\\s*<[^>]+\\/>\\s*$/ig.test(item);\n        },\n\n        isTag: function (item) {\n            return this.isOpeningTag(item) ? 1 : this.isClosingTag(item) ? 2 : 0;\n        }\n    };\n\n    root.getHTMLDiff = function (oldVersion, newVersion) {\n        if (oldVersion == newVersion) {\n            return newVersion\n        } else {\n            return new DiffBuilder(oldVersion, newVersion).build();\n        }\n\n    };\n    //export default root.getHTMLDiff\n})(window);"]},"metadata":{},"sourceType":"module"}